% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/goServeR.R
\name{runServer}
\alias{runServer}
\title{runServer}
\usage{
runServer(
  dir = getwd(),
  addr = "0.0.0.0:8181",
  prefix = "",
  blocking = TRUE,
  cors = FALSE,
  coop = FALSE,
  tls = FALSE,
  certfile = "cert.pem",
  keyfile = "key.pem",
  silent = FALSE,
  log_handler = NULL,
  auth_keys = c(),
  auth = FALSE,
  initial_keys = c(),
  ...
)
}
\arguments{
\item{dir}{character vector of directories to serve}

\item{addr}{address}

\item{prefix}{character vector of server prefixes (must have same length as dir)}

\item{blocking}{logical, if FALSE runs in background and returns a handle}

\item{cors}{logical, enable CORS headers}

\item{coop}{logical, enable COOP/COEP headers}

\item{tls}{logical, enable TLS (HTTPS)}

\item{certfile}{path to TLS certificate file}

\item{keyfile}{path to TLS key file}

\item{silent}{logical, suppress server logs}

\item{log_handler}{function, custom log handler function(handler, message, user)}

\item{auth_keys}{character vector of API keys for authentication. Default c() = no auth}

\item{auth}{logical, enable dynamic authentication system (non-blocking mode only)}

\item{initial_keys}{character vector of initial API keys for dynamic auth system}

\item{...}{additional arguments passed to the server}
}
\value{
NULL (if blocking) or an external pointer (if non-blocking)
}
\description{
Run the go http server (blocking or background)
}
\examples{
\dontrun{
# Start a blocking server (will block the R session)
# runServer(dir = ".", addr = "0.0.0.0:8080")

# Start a background server (returns a handle)
h <- runServer(dir = ".", addr = "0.0.0.0:8080", blocking = FALSE)

# Start a server with static auth keys (backward compatible)
h <- runServer(
    dir = ".", addr = "0.0.0.0:8080", blocking = FALSE,
    auth_keys = c("secret123", "token456")
)

# Start a server with dynamic auth system
h <- runServer(
    dir = ".", addr = "0.0.0.0:8080", blocking = FALSE,
    auth = TRUE, initial_keys = c("secret123")
)

# Manage auth keys dynamically (only with auth=TRUE)
auth <- attr(h, "auth")
addAuthKey(auth, "new_key_456")
removeAuthKey(auth, "secret123")
listAuthKeys(auth)

# Start a server serving multiple directories
h <- runServer(
    dir = c("./data", "./docs", "."),
    prefix = c("/api/data", "/docs", "/files"),
    addr = "0.0.0.0:8080",
    blocking = FALSE
)

# Start a server with custom log handler
logfile <- tempfile("server_", fileext = ".log")
h <- runServer(
    dir = ".", addr = "0.0.0.0:8080", blocking = FALSE,
    log_handler = function(handler, message, user) {
        cat("[CUSTOM]", message, file = logfile, append = TRUE)
    }
)

# List all running background servers
listServers()

# Get a summary view
summary(listServers())

# Shutdown a background server
shutdownServer(h)
}
}
